version: "3.8"
services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - mynetwork

  db:
    build: 
      context: ./db
      args:
        - POSTGRES_DB=${DB_NAME}
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

  backend:
    build:
      context: ./backend
    ports:
      - "8000"
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - .env
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
  nginx:
    build:
      context: ./nginx
    volumes:
      - media_volume:/app/media

    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - mynetwork
    
    
volumes:
  postgres_data:
  media_volume:

networks:
  mynetwork:
    driver: bridge

