version: "3.8"
services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  db:
    build: 
      context: ./db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U djangouser -d djangodb"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DEBUG=True
      - DB_NAME=djangodb
      - DB_USER=djangouser
      - DB_PASSWORD=djangopass
      - DB_HOST=db
      - DB_PORT=5432

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
  #   ports:
  #     - "9200:9200"
  #   environment:
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "xpack.security.enabled=false"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9200"]
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.0.0
  #   ports:
  #     - "5000:5000/udp"
  #     - "5000:5000/tcp"
  #     - "5044:5044"
  #     - "9600:9600"
  #   volumes:
  #     - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
  #     - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   environment:
  #     - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9600"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
    
volumes:
  postgres_data:

networks:
  default:
    name: mynetwork